//-------------------------------------------------------------------------------
// Copyright IBM Corp. 2015
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-------------------------------------------------------------------------------

'use strict';

var util = require('util');

var pipesSDK = require('simple-data-pipe-sdk');
var connectorExt = pipesSDK.connectorExt;

var bluemixHelperConfig = require('bluemix-helper-config');
var global = bluemixHelperConfig.global;

var runkeeper = require('runkeeper-js');

// See https://github.com/mko/runkeeper-js for runkeeper client options
var runkeeperClientOptions = {
	client_id : "", /* will be set by sdp */
	client_secret : "", /* will be set by sdp */
	auth_url : "https://runkeeper.com/apps/authorize",
	access_token_url : "https://runkeeper.com/apps/token",
	redirect_uri : "",
	access_token : "", /* will be set by sdp */
	api_domain : "api.runkeeper.com"
};

var dataSourcePassportStrategy = require('passport-runkeeper').Strategy;

/**
 * Connector that retrieves JSON records from RunKeeper and stores them in Cloudant
 */
function oAuthRunKeeperConnector( parentDirPath ){

	var connectorInfo = {
		id: require('../package.json').simple_data_pipe.name,
		name: 'RunKeeper OAuth Data Source'
	};

	var connectorOptions = {
		recreateTargetDb: true, // if set (default: false) all data currently stored in the staging database is removed prior to data load
		useCustomTables: true   // keep true (default: false)
	};						

	// Call constructor from super class; 
	connectorExt.call(this, 
		connectorInfo.id, 			
		connectorInfo.name, 
		connectorOptions	  
	);	

	// writes to the application's global log file
	var globalLog = this.globalLog;

	// simple wrapper to make RunKeeper API calls using OAuth2.0
	var runkeeperClient = new runkeeper.HealthGraph(runkeeperClientOptions);

	/**
	 * Customization is mandatory!
	 * Define the passport strategy to use for oAuth authentication with the data source
	 * @param pipe - data pipe configuration, containing the user-provided oAuth client id and client secret
	 * @returns a passport strategy for this data source
	 */
	this.getPassportStrategy = function(pipe) {

		return new dataSourcePassportStrategy({
			clientID: pipe.clientId,											 // mandatory; oAuth client id; do not change
	        clientSecret: pipe.clientSecret,									 // mandatory; oAuth client secret;do not change
	        callbackURL: "https://localhost:8082" + '/authCallback'					 // mandatory; oAuth callback; do not change
		  },
		  function(accessToken, refreshToken, profile, done) {					 // Passport verify callback; customize signature as needed

		  	globalLog.debug('User was authenticated successfully. Profile information: ' + util.inspect(profile,3));

			  process.nextTick(function () {

			  	// Mandatory; attach the obtained access token to the user profile
			  	// Mandatory, if applicable; also attach the obtained refresh token to the user profile
			  	// the user profile is passed as a parameter to authCallback()
		        profile.oauth_access_token = accessToken; 
		        
		        profile.oauth_refresh_token = refreshToken; 

			    return done(null, profile);
			  });
		  }
		);
	};

	/**
	 * Returns list of stripe specific OAuth options to be passed to the passport.authenticate call
	 * (GET https://connect.stripe.com/oauth/authorize), which starts the OAuth flow.
	 * {@link https://stripe.com/docs/connect/reference}
	 * @override
	 * @returns {scope:'read_only'} {@link https://github.com/reddit/reddit/wiki/OAuth2}
	 */
	this.getPassportAuthorizationParams = function() {
       return {scope:'read_only'};
	}; // getPassportAuthorizationParams

	/**
	 * Customization is mandatory!	
	 * passportAuthCallbackPostProcessing: post processing for OAuth authentication protocol
	 * Stores accessToken + refreshToken and retrieves list of available 'tables' (stripe objects) that can be moved by the pipe
	 * @param profile - the output generated by the passport verify callback
	 * @param pipe - data pipe configuration
	 * @param callback(err, pipe ) error information in case of a problem or the updated pipe
	 */
	this.passportAuthCallbackPostProcessing = function( profile, pipe, callback ){
				
        pipe.oAuth = {
			accessToken : profile.oauth_access_token,
			refreshToken: profile.oauth_refresh_token
		};

		// Fetch list of data sets that the user can choose from; the list is displayed in the Web UI in the "Filter Data" panel.
        // Attach data set list to the pipe configuration
		this.getRunKeeperDataSetList(pipe, function (err, pipe){
			if(err) {
		    	globalLog.error('OAuth post processing failed. The stripe data set list could not be created for data pipe configuration ' + pipe._id + ': ' + err);
		    }	
		    else {
			    globalLog.debug('OAuth post processing completed. Data pipe configuration was updated: ');
			    globalLog.debug(' ' + util.inspect(pipe,3));
		    }	

			return callback(err, pipe);
		});		

	}; // authCallback

	/*
	 * Customization is mandatory!
	 * @param {Object} pipe - Data pipe configuration
	 * @param {callback} done - invoke after processing is complete or has resulted in an error; parameters (err, updated_pipe)
	 * @return list of data sets (also referred to as tables for legacy reasons) from which the user can choose from
	 */
	this.getRunKeeperDataSetList = function(pipe, done){

		var dataSets = [];

		// Sample: dataSets.push({name:'InternalRedditDataSetName', label:'DisplayedRedditDataSetName'});
		dataSets.push({name:'records', label:'Records', description : ''});
		dataSets.push({name:'fitnessActivities', label:'Fitness activities', description : ''});

		// Sometimes you might want to provide the user with the option to load all data sets concurrently
		// To enable that feature, define a single data set that contains only property 'labelPlural' 
		dataSets.push({labelPlural:'All data sets'});

		// In the UI the user gets to choose from: 
		//  -> All data sets
		//  -> sample data set 1
		//  -> ...

		// sort data set list (if present, the ALL_DATA option should be displayed first)
		// attach data set list to data pipe configuration document
		pipe.tables =  dataSets.sort(function (dataSet1, dataSet2) {
			if(! dataSet1.name)	{ // ALL_DATA (only property labelPlural is defined)
				return -1;
			}

			if(! dataSet2.name) {// ALL_DATA (only property labelPlural is defined)
				return 1;
			}

			return dataSet1.label.localeCompare(dataSet2.label);
	   });

		return done(null, pipe);

	}; // getTables


	/*
	 * ---------------------------------------------------------------------------------------
	 * Override general connector methods:
	 *  - doConnectStep: verify that OAuth information is still valid
	 *  - fetchRecords:  load data from data source
	 * ---------------------------------------------------------------------------------------
	 */

	/**
	* Customization is not required.
	* During data pipe runs, this method is invoked first. Add custom code as required, for example to verify that the 
	* OAuth token has not expired.
	* @param done: callback that must be called when the connection is established
	* @param pipeRunStep
	* @param pipeRunStats
	* @param pipeRunLog
	* @param pipe
	* @param pipeRunner
	*/
	this.doConnectStep = function( done, pipeRunStep, pipeRunStats, pipeRunLog, pipe, pipeRunner ){
		// initialize the runkeeper client
		if(pipe) {
			runkeeperClient.client_id = pipe.clientId;
			runkeeperClient.client_secret = pipe.clientSecret;
			runkeeperClient.access_token = pipe.oAuth.accessToken;
		}
		else {
			runkeeperClient = null;
		}
		// TODO: Not sure if RunKeeper access tokens expire
		return done();
	}; // doConnectStep

	/*
	 * Customization is mandatory!
	 * Implement the code logic to fetch data from the source, optionally enrich it and store it in Cloudant.
	 * @param dataSet - dataSet.name contains the data set name that was (directly or indirectly) selected by the user
	 * @param done(err) - callback funtion to be invoked after processing is complete (or a fatal error has been encountered)
	 * @param pipe - data pipe configuration
	 * @param pipeRunLog - a dedicated logger instance that is only available during data pipe runs
	 */
	this.fetchRecords = function( dataSet, pushRecordFn, done, pipeRunStep, pipeRunStats, pipeRunLog, pipe, pipeRunner ){

		// The data set is typically selected by the user in the "Filter Data" panel during the pipe configuration step
		// dataSet: {name: 'data set name'}. However, if you enabled the ALL option (see get Tables) and it was selected, 
		// the fetchRecords function is invoked asynchronously once for each data set.

		// Bunyan logging - https://github.com/trentm/node-bunyan
		// The log file is attached to the pipe run document, which is stored in the Cloudant repository database named pipes_db.
		// To enable debug logging, set environment variable DEBUG to '*'' or 'to sdp-pipe-run' (withoiut the quotes).
		pipeRunLog.info('Fetching data set ' + dataSet.name + ' from runkeeper.');

		// call stripe API (https://stripe.com/docs/api/node#intro) to fetch data for the selected data set ...
		switch(dataSet.name) {
			case 'records' :
				this.getRecords(pushRecordFn, pipeRunLog, pipe, done);
				break;
			case 'fitnessActivities' :
				this.getFitnessActivities(pushRecordFn, pipeRunLog, pipe, done);
				break;
			default:
				pipeRunLog.error('This runkeeper connector cannot process data set ' + dataSet.name);
				done();
		}

		// Invoke done callback to indicate that data set dataSet has been processed.
		// Parameters:
		//  done()                                      // no parameter; processing completed successfully. no status message text is displayed to the end user in the monitoring view
		//  done({infoStatus: 'informational message'}) // processing completed successfully. the value of the property infoStatus is displayed to the end user in the monitoring view
		//  done({errorStatus: 'error message'})        // a fatal error was encountered during processing. the value of the property infoStatus is displayed to the end user in the monitoring view
		//  done('error message')                       // deprecated; a fatal error was encountered during processing. the message is displayed to the end user in the monitoring view
		//return done();

	}; // fetchRecords

	/*
	 * Customization is not needed.
	 */
	this.getTablePrefix = function(){
		// The prefix is used to generate names for the Cloudant staging databases that hold your data. The recommended
		// value is the connector ID to assure uniqueness.
		return "runkeeper";
	};

	this.getRecords = function(pushRecordFn, pipeRunLog, pipe, done) {
		pipeRunLog.info('Fetching records.');
		runkeeperClient.apiCall("GET", "application/vnd.com.runkeeper.Records+json", "/records", function(err, reply) {
			if(err) {
				console.log(err);
			}
			else {
				// Do whatever you need with the API's reply.
				if (reply && reply.length > 0) {
					pushRecordFn(reply);
				}
			}
			done();
		});
	};

	this.getFitnessActivities = function(pushRecordFn, pipeRunLog, pipe, done) {
		pipeRunLog.info('Fetching fitness activities.');
		runkeeperClient.fitnessActivities(function(err, reply) {
			if(err) {
				console.log(err);
			}
			else {
				// Do whatever you need with the API's reply.
				if (reply && reply.items && reply.items.length > 0) {
					pushRecordFn(reply.items);
				}
			}
			done();
		});
	}

}

//Extend event Emitter
util.inherits(oAuthRunKeeperConnector, connectorExt);

module.exports = new oAuthRunKeeperConnector();